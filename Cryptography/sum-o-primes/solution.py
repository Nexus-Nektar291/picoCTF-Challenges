from Crypto.Util.number import *
import gmpy2
import sympy

sum = 0x152A1447B61D023BEBAB7B1F8BC9D934C2D4B0C8EF7E211DBBCF841136D030E3C829F222CEC318F6F624EB529B54BCDA848F65574896D70CD6C3460D0C9064CD66E826578C2035AB63DA67D069FA302227A9012422D2402F8F0D4495EF66104EBD774F341AA62F493184301DEBF910AB3D1E72E357A99C460370254F3DFCCD9AE
n = 0x6FC1B2BE753E8F480C8B7576F77D3063906A6A024FE954D7FD01545E8F5B6BECC24D70E9A5BC034A4C00E61F8A6176FEB7D35FE39C8C03617EA4552840D93AA09469716913B58DF677C785CD7633D1B7D31E2222CAB53BE235AA412AC5C5B07B500CF3FD5D6B91E2DDC51BFF1E6EEC2CB68723AF668DF36E10E332A9CBB7F3E2DF9593FA0E553ED58AFEC2AA3BC4AE8EF1140E4779F61BDEAE4C0B46136294CF151622E83C3D71B97C815B542208BAA28207225F134C5A4FEAC998AEB178A5552F08643717819C10E8B5EC7715696C3BF4434FBEA8E8A516DFD90046A999E24A0FB10D27291EB29EF3F285149C20189E7D0190417991094948180196543B8C91
c = 0x16ACF84A73CEFD321ED491A15C640A495B09050CDCE435EC37442FAF9A694775E1EBFFB6DBAD6133CBC54E3F641506B0613F711625594FCB467F915F2708714B4C9936F5F4752C3299157CFF4EB68EB82C0054DAE351314829974F4FEADAF126CDA92B97E348DBEF2640EC3A729A064E615DF73D644700F93BF87579683E253D29622525BEA3644F59AAC8E0B2553BFEA48D99E9B323E03CBF55166659974EB8C51CC7B2C2C5D6AA6C01B056A8ED7283D96656A3496F266726605AF1BE139D586F208D4D7C59C2771DC8036D490D3672EE4513301002775D7C39EAC421C6CB4F01344E061549A4CB11C057ACCEF1726572E447501004C772EC91B4A55811280F
e = 0x10001

p = (sum + gmpy2.isqrt(sum**2 - 4 * n)) // 2
q = n // p

assert p * q == n, "Invalid factors"

phi = (p - 1) * (q - 1)
d = inverse(e, phi)

pt = pow(c, d, n)
print("Decrypted Flag is : ", long_to_bytes(pt).decode())
