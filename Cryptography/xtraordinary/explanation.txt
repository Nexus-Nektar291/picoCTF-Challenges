XtraORdinary (Cryptography)
Check out my new, never-before-seen method of encryption! I totally invented it myself. I added so many for loops that I don't even know what it does. It's extraordinarily secure!

Attachments
, output.txt
, encrypt.py

Since the title is XtraORdinary and emphasizes XOR, I assume it will be decrypted with XOR. If you use the same key to XOR something encrypted with XOR, it will be restored to its original state.
When I looked at encrypt.py, I found that it was actually encrypted with xor.

for random_str in random_strs:
    for i in range(randint(0, pow(2, 8))):
        for j in range(randint(0, pow(2, 6))):
            for k in range(randint(0, pow(2, 4))):
                for l in range(randint(0, pow(2, 2))):
                    for m in range(randint(0, pow(2, 0))):
                        ctxt = encrypt(ctxt, random_str)

Although there are some parts where xor is repeated, it is simpler than it looks because it is just repeating encryption and decryption.
The encryption key is also as shown below, but since the result does not change even if there are many evers, there are actually only five. Therefore, the number of xor trials is 2^5=32.

random_strs = [
    b'my encryption method',
    b'is absolutely impenetrable',
    b'and you will never',
    b'ever',
    b'ever',
    b'ever',
    b'ever',
    b'ever',
    b'ever',
    b'break it'
]

The encryption procedure seems to involve repeatedly xoring the flag with the key and then xoring it with random_strs. The identity of the key is unknown, but it is certain that the first character string of the flag is "picoCTF{", so picoCTF{by applying this to the key part, we can find out the identity of the key used for encryption.
Below is the execution code.

from Crypto.Util.number import long_to_bytes, bytes_to_long

ctxt=long_to_bytes(0x57657535570c1e1c612b3468106a18492140662d2f5967442a2960684d28017931617b1f3637)
key=b"picoCTF{"
random_strs = [
    b'my encryption method',
    b'is absolutely impenetrable',
    b'and you will never',
    b'ever',
    b'break it'
]

def encrypt(ptxt, key):
    ctxt = b''
    for i in range(len(ptxt)):
        a = ptxt[i]
        b = key[i % len(key)]
        ctxt += bytes([a ^ b])
    return ctxt

for _ in range(2):
  ctxt = encrypt(ctxt, random_strs[0])
  for _ in range(2):
    ctxt = encrypt(ctxt, random_strs[1])
    for _ in range(2):
      ctxt = encrypt(ctxt, random_strs[2])
      for _ in range(2):
        ctxt = encrypt(ctxt, random_strs[3])
        for _ in range(2):
          ctxt = encrypt(ctxt, random_strs[4])
          a = encrypt(ctxt, key)
          print(a)

When I ran it, I searched for a meaningful string that seemed to be repeated, and Africa!found the string ". This is probably the true identity of the key. When I changed the above execution code key=b"picoCTF{"to key=b"Africa!"" and ran it again, I got the flag.

